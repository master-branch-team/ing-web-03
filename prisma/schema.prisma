// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String @id @default(cuid())
  email      String @unique
  full_name  String
  phone      String
  address    String
  photo_link String

  creation_date DateTime @default(now())
  update_date   DateTime @updatedAt

  position      Position      @relation(fields: [position_id], references: [id])
  position_id   String
  user_type     UserType      @relation(fields: [user_type_id], references: [id])
  user_type_id  String
  course_states CourseState[]
  notes         Note[]
  comments      Comment[]
  likes         Like[]
  trainings     Training[]
}

model Position {
  id   String @id @default(cuid())
  name String

  creation_date DateTime @default(now())
  update_date   DateTime @updatedAt

  users User[]
}

model UserType {
  id   String @id @default(cuid())
  name String @unique

  creation_date DateTime @default(now())
  update_date   DateTime @updatedAt

  users User[]
}

model Note {
  id   String @id @default(cuid())
  text String

  creation_date DateTime @default(now())
  update_date   DateTime @updatedAt

  user      User   @relation(fields: [user_id], references: [id])
  user_id   String
  course    Course @relation(fields: [course_id], references: [id])
  course_id String
  likes     Like[]
}

model Comment {
  id   String @id @default(cuid())
  text String

  creation_date DateTime @default(now())
  update_date   DateTime @updatedAt

  user        User     @relation(fields: [user_id], references: [id])
  user_id     String
  training    Training @relation(fields: [training_id], references: [id])
  training_id String
}

model Like {
  id String @id @default(cuid())

  creation_date DateTime @default(now())
  update_date   DateTime @updatedAt

  user    User   @relation(fields: [user_id], references: [id])
  user_id String
  note    Note   @relation(fields: [note_id], references: [id])
  note_id String
}

model Course {
  id       String @id @default(cuid())
  name     String
  duration Int
  link     String

  creation_date DateTime @default(now())
  update_date   DateTime @updatedAt

  trainings     Training[]
  course_states CourseState[]
  notes         Note[]
}

model Training {
  id          String @id @default(cuid())
  name        String
  description String

  creation_date DateTime @default(now())
  update_date   DateTime @updatedAt

  courses  Course[]
  users    User[]
  comments Comment[]
}

model CourseState {
  id               String  @id @default(cuid())
  is_completed     Boolean
  certificated     Boolean
  certificate_link String

  creation_date DateTime @default(now())
  update_date   DateTime @updatedAt

  user      User   @relation(fields: [user_id], references: [id])
  user_id   String
  course    Course @relation(fields: [course_id], references: [id])
  course_id String
}
